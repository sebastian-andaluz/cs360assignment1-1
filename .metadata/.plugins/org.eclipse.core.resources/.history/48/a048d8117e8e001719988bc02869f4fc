package cs360Project1;
import java.io.IOException;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.maps.GeoApiContext;
import com.google.maps.GeocodingApi;
import com.google.maps.errors.ApiException;
import com.google.maps.model.GeocodingResult;

public class Mapping {
	
	//Takes String and uses Google search to find the latitude and longitude of that location
	public static double[] getCoordinates(String schoolName) throws ApiException, InterruptedException, IOException{
		//array latlon will have the format [lat, lon]
		double[] latlng = new double[2];
			
		GeoApiContext context = new GeoApiContext.Builder().apiKey("AIzaSyBgMiAoxARqgj3jtc1jZz6qoUqP_7gce2c").build();
		GeocodingResult[] results =  GeocodingApi.geocode(context,schoolName).await();
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		
		latlng[0] = results[0].geometry.location.lat;
		latlng[1] = results[0].geometry.location.lng;
		
		
		
		return latlng;
	}
	
	//takes an array of size 2 that contains a latitude and longitude as parameters and returns the distance between them
	//
	public static double getDistanceBetween(double lat1, double lng1, double lat2, double lng2){
		double R = 6371; // radius of the earth, distance is in kilometers
		
		double radians = 3.14159/180;
		
		double dLat = (radians*lat2 - radians*lat1);
		double dLon = (radians*lng2-radians*lng1);
		lat1 = (lat1)*radians;
		lat2 = (lat2)*radians;
		
		//double a = Math.pow(Math.sin(dLat / 2),2) + Math.pow(Math.sin(dLon / 2),2) * Math.cos(lat1) * Math.cos(lat2);
		double a = Math.sin(dLat/2) * Math.sin(dLat/2) +Math.cos((lat1*radians)) * Math.cos((lat2*radians)) 
			      * Math.sin(dLon / 2) * Math.sin(dLon / 2);
		         // Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        double distance = R * c;
        return distance;
	}
	
	public static double DistanceBetweenSchools (double lat1, double lng1, double lat2, double lng2) {
        double DEG_TO_RAD = 3.14159/180;
        double EARTH_RADIUS = 3959; //Earth radius in miles

        double rad_lat1 = lat1 * DEG_TO_RAD;
        double rad_lng1 = lng1 * DEG_TO_RAD;
        double rad_lat2 = lat2 * DEG_TO_RAD;
        double rad_lng2 = lng2 * DEG_TO_RAD;
        
        double a = Math.pow(Math.sin((rad_lat1 - rad_lat2)/2),2) + Math.cos(rad_lat1) * Math.cos(rad_lat2) * Math.pow(Math.sin((rad_lng1 - rad_lng2) / 2), 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

        return c * EARTH_RADIUS;
    }

}
