package cs360Project1;

import java.util.ArrayList;

public class SectionalSort {


	int overFlow;
	//Returns an array of Schools (Divided by sectional they belong to
	public ArrayList<String> sectionals (ArrayList<School> schoolList, int sectionalCount, int sectSize)
	{
		//Sectional * Schools in Sectional
		//String[][] sectionals = new String[sectionalCount][sectSize]; //TODO:sectSize + 2?];
		
		ArrayList<String> sectionals = new ArrayList<String>(sectionalCount);
		//Array for Schools that are closest to a "full" sectional
		ArrayList<School> leftOver = new ArrayList<School>(overFlow);
		int leftOverTracker = 0;
		int sectFloor = sectSize;
		
		//goes through all ~400 schools to do initial assignments
		for (int x = 0; x <= schoolList.size(); x++)
		{
			School current = schoolList.get(x);
			double leastDistance = Double.MAX_VALUE; // should be highest possible distance, might be inefficient
			int closestSchoolIndex;
			//Go through ~30 sectional hosts
			for (int y=0; y <= current.distanceToSectionalHost.size(); y++)
			{
				//Checks if the sectional it is currently comparing is closer than the previous closest
				if (current.distanceToSectionalHost.get(y) < leastDistance)
				{

					//leastDistance = current.distanceToSectionalHost[y];
					current.distanceToSectionalHost.set(y, leastDistance);
					closestSchoolIndex = y;
				
				}
			}
			//If the Sectional is already full to the minimum, place it in the leftOver for later
			//if (TODO: the sectional is already at its floor (minimum))
			{
				//leftOver[leftOverTracker] = current;
				leftOver.add(leftOverTracker, current);
				leftOverTracker++;
				//TODO: Break to next school in ~400
			}
			//else 
				//{TODO: Assign current to sectional}
		}
		
		return sectionals;
	}
	
	public void addDistanceToHost(School[] allSchools, ArrayList<School> hostSchools)
	{
		double[] distances = new double[hostSchools.size()];
		
		for(int i = 0; i < allSchools.length; i++)
		{
			for(int j = 0; j < hostSchools.size(); j++)
			{
				distances[j] = Mapping.getDistanceBetween(allSchools[i].getLat(), allSchools[i].getLng(), 
						hostSchools.get(j).getLat(), hostSchools.get(j).getLng());
			}
		}
	}
	
}
